{"version":3,"sources":["../../kinit.js"],"names":["Distance","require","eudist","dist","module","exports","kmrand","data","k","map","ks","t","len","length","multi","d","Math","floor","random","key","join","push","Error","kmpp","distance","c","dists","lk","dsum","prs","i","min","Infinity","j","v","pr","cs","sort","a","b","rnd","idx"],"mappings":"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","sourcesContent":["const\r\n\tDistance = require(\"./distance.js\"),\r\n\teudist = Distance.eudist,\r\n\tdist = Distance.dist;\r\n\r\nmodule.exports = {\r\n\tkmrand(data,k) {\r\n\t\tvar map = {}, ks = [], t = k<<2;\r\n\t\tvar len = data.length;\r\n\t\tvar multi = data[0].length>0;\r\n\r\n\t\twhile(ks.length<k && (t--)>0) {\r\n\t\t\tlet d = data[Math.floor(Math.random()*len)];\r\n\t\t\tlet key = multi? d.join(\"_\") : `${d}`;\r\n\t\t\tif(!map[key]) {\r\n\t\t\t\tmap[key] = true;\r\n\t\t\t\tks.push(d);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(ks.length<k) throw new Error(\"Error initializating clusters\");\r\n\t\telse return ks;\r\n\t},\r\n\r\n\t/**\r\n\t * K-means++ initial centroid selection\r\n\t */\r\n\tkmpp(data,k) {\r\n\t\tvar distance = data[0].length? eudist : dist;\r\n\t\tvar ks = [], len = data.length;\r\n\t\tvar multi = data[0].length>0;\r\n\t\tvar map = {};\r\n\r\n\t\t// First random centroid\r\n\t\tvar c = data[Math.floor(Math.random()*len)];\r\n\t\tvar key = multi? c.join(\"_\") : `${c}`;\r\n\t\tks.push(c);\r\n\t\tmap[key] = true;\r\n\r\n\t\t// Retrieve next centroids\r\n\t\twhile(ks.length<k) {\r\n\t\t\t// Min Distances between current centroids and data points\r\n\t\t\tlet dists = [], lk = ks.length;\r\n\t\t\tlet dsum = 0, prs = [];\r\n\r\n\t\t\tfor(let i=0;i<len;i++) {\r\n\t\t\t\tlet min = Infinity;\r\n\t\t\t\tfor(let j=0;j<lk;j++) {\r\n\t\t\t\t\tlet dist = distance(data[i],ks[j]);\r\n\t\t\t\t\tif(dist<=min) min = dist;\r\n\t\t\t\t}\r\n\t\t\t\tdists[i] = min;\r\n\t\t\t}\r\n\r\n\t\t\t// Sum all min distances\r\n\t\t\tfor(let i=0;i<len;i++) {\r\n\t\t\t\tdsum += dists[i]\r\n\t\t\t}\r\n\r\n\t\t\t// Probabilities and cummulative prob (cumsum)\r\n\t\t\tfor(let i=0;i<len;i++) {\r\n\t\t\t\tprs[i] = {i:i, v:data[i],\tpr:dists[i]/dsum, cs:0}\r\n\t\t\t}\r\n\r\n\t\t\t// Sort Probabilities\r\n\t\t\tprs.sort((a,b)=>a.pr-b.pr);\r\n\r\n\t\t\t// Cummulative Probabilities\r\n\t\t\tprs[0].cs = prs[0].pr;\r\n\t\t\tfor(let i=1;i<len;i++) {\r\n\t\t\t\tprs[i].cs = prs[i-1].cs + prs[i].pr;\r\n\t\t\t}\r\n\r\n\t\t\t// Randomize\r\n\t\t\tlet rnd = Math.random();\r\n\r\n\t\t\t// Gets only the items whose cumsum >= rnd\r\n\t\t\tlet idx = 0;\r\n\t\t\twhile(idx<len-1 && prs[idx++].cs<rnd);\r\n\t\t\tks.push(prs[idx-1].v);\r\n\t\t\t/*\r\n\t\t\tlet done = false;\r\n\t\t\twhile(!done) {\r\n\t\t\t\t// this is our new centroid\r\n\t\t\t\tc = prs[idx-1].v\r\n\t\t\t\tkey = multi? c.join(\"_\") : `${c}`;\r\n\t\t\t\tif(!map[key]) {\r\n\t\t\t\t\tmap[key] = true;\r\n\t\t\t\t\tks.push(c);\r\n\t\t\t\t\tdone = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tidx++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t}\r\n\r\n\t\treturn ks;\r\n\t}\r\n\r\n}\r\n"],"file":"kinit.js"}