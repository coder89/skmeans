{"version":3,"sources":["skmeans.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","root","previous_skmeans","skmeans","window","eudist","v1","v2","len","sum","d","mandist","dist","sqrt","Math","abs","Distance","kmrand","data","k","map","ks","multi","floor","random","key","join","push","kmpp","distance","dists","lk","dsum","prs","min","Infinity","j","v","pr","cs","sort","b","rnd","idx","ClusterInit","absdist","MAX","init","val","test","point","fndist","Array","isArray","centroids","centroid","initial","maxit","old","idxs","conv","it","vlen","count","z","dif","vsum","vect","h","ksj","sumj","oldj","cj"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\r\n\r\n(function() {\r\n  var root = this\r\n  var previous_skmeans = root.skmeans;\r\n\tvar skmeans = require('./main.js');\r\n\r\n\tif( typeof exports !== 'undefined' ) {\r\n    if( typeof module !== 'undefined' && module.exports ) {\r\n      exports = module.exports = skmeans;\r\n    }\r\n    exports.skmeans = skmeans;\r\n  }\r\n\r\n\tif(typeof window !== 'undefined') {\r\n    window.skmeans = skmeans;\r\n  }\r\n\r\n}).call(this);\r\n\n},{\"./main.js\":4}],2:[function(require,module,exports){\nmodule.exports = {\r\n\t/**\r\n\t * Euclidean distance\r\n\t */\r\n\teudist(v1,v2) {\r\n\t\tvar len = v1.length;\r\n\t\tvar sum = 0;\r\n\r\n\t\tfor(let i=0;i<len;i++) {\r\n\t\t\tvar d = (v1[i]||0) - (v2[i]||0);\r\n\t\t\tsum += d*d;\r\n\t\t}\r\n\t\t// Square root not really needed\r\n\t\treturn sum;\r\n\t},\r\n\r\n\tmandist(v1,v2) {\r\n\t\tvar len = v1.length;\r\n\t\tvar sum = 0, d = 0;\r\n\r\n\t\tfor(let i=0;i<len;i++) {\r\n\t\t\td = (v1[i]||0) - (v2[i]||0);\r\n\t\t\tsum += (d>=0)? d : -d;\r\n\t\t}\r\n\r\n\t\treturn sum;\r\n\t},\r\n\r\n\t/**\r\n\t * Unidimensional distance\r\n\t */\r\n\tdist(v1,v2,sqrt) {\r\n\t\tvar d = Math.abs(v1-v2);\r\n\t\treturn sqrt? d : d*d;\r\n\t}\r\n\r\n}\r\n\n},{}],3:[function(require,module,exports){\nconst\r\n\tDistance = require(\"./distance.js\"),\r\n\teudist = Distance.eudist,\r\n\tdist = Distance.dist;\r\n\r\nmodule.exports = {\r\n\tkmrand(data,k) {\r\n\t\tvar map = {}, ks = [], t = k<<2;\r\n\t\tvar len = data.length;\r\n\t\tvar multi = data[0].length>0;\r\n\r\n\t\twhile(ks.length<k && (t--)>0) {\r\n\t\t\tlet d = data[Math.floor(Math.random()*len)];\r\n\t\t\tlet key = multi? d.join(\"_\") : `${d}`;\r\n\t\t\tif(!map[key]) {\r\n\t\t\t\tmap[key] = true;\r\n\t\t\t\tks.push(d);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(ks.length<k) throw new Error(\"Error initializating clusters\");\r\n\t\telse return ks;\r\n\t},\r\n\r\n\t/**\r\n\t * K-means++ initial centroid selection\r\n\t */\r\n\tkmpp(data,k) {\r\n\t\tvar distance = data[0].length? eudist : dist;\r\n\t\tvar ks = [], len = data.length;\r\n\t\tvar multi = data[0].length>0;\r\n\t\tvar map = {};\r\n\r\n\t\t// First random centroid\r\n\t\tvar c = data[Math.floor(Math.random()*len)];\r\n\t\tvar key = multi? c.join(\"_\") : `${c}`;\r\n\t\tks.push(c);\r\n\t\tmap[key] = true;\r\n\r\n\t\t// Retrieve next centroids\r\n\t\twhile(ks.length<k) {\r\n\t\t\t// Min Distances between current centroids and data points\r\n\t\t\tlet dists = [], lk = ks.length;\r\n\t\t\tlet dsum = 0, prs = [];\r\n\r\n\t\t\tfor(let i=0;i<len;i++) {\r\n\t\t\t\tlet min = Infinity;\r\n\t\t\t\tfor(let j=0;j<lk;j++) {\r\n\t\t\t\t\tlet dist = distance(data[i],ks[j]);\r\n\t\t\t\t\tif(dist<=min) min = dist;\r\n\t\t\t\t}\r\n\t\t\t\tdists[i] = min;\r\n\t\t\t}\r\n\r\n\t\t\t// Sum all min distances\r\n\t\t\tfor(let i=0;i<len;i++) {\r\n\t\t\t\tdsum += dists[i]\r\n\t\t\t}\r\n\r\n\t\t\t// Probabilities and cummulative prob (cumsum)\r\n\t\t\tfor(let i=0;i<len;i++) {\r\n\t\t\t\tprs[i] = {i:i, v:data[i],\tpr:dists[i]/dsum, cs:0}\r\n\t\t\t}\r\n\r\n\t\t\t// Sort Probabilities\r\n\t\t\tprs.sort((a,b)=>a.pr-b.pr);\r\n\r\n\t\t\t// Cummulative Probabilities\r\n\t\t\tprs[0].cs = prs[0].pr;\r\n\t\t\tfor(let i=1;i<len;i++) {\r\n\t\t\t\tprs[i].cs = prs[i-1].cs + prs[i].pr;\r\n\t\t\t}\r\n\r\n\t\t\t// Randomize\r\n\t\t\tlet rnd = Math.random();\r\n\r\n\t\t\t// Gets only the items whose cumsum >= rnd\r\n\t\t\tlet idx = 0;\r\n\t\t\twhile(idx<len-1 && prs[idx++].cs<rnd);\r\n\t\t\tks.push(prs[idx-1].v);\r\n\t\t\t/*\r\n\t\t\tlet done = false;\r\n\t\t\twhile(!done) {\r\n\t\t\t\t// this is our new centroid\r\n\t\t\t\tc = prs[idx-1].v\r\n\t\t\t\tkey = multi? c.join(\"_\") : `${c}`;\r\n\t\t\t\tif(!map[key]) {\r\n\t\t\t\t\tmap[key] = true;\r\n\t\t\t\t\tks.push(c);\r\n\t\t\t\t\tdone = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tidx++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t}\r\n\r\n\t\treturn ks;\r\n\t}\r\n\r\n}\r\n\n},{\"./distance.js\":2}],4:[function(require,module,exports){\n/*jshint esversion: 6 */\r\n\r\nconst\r\n\tDistance = require(\"./distance.js\"),\r\n\tClusterInit = require(\"./kinit.js\"),\r\n\teudist = Distance.eudist,\r\n\tmandist = Distance.mandist,\r\n\tabsdist = Distance.dist,\r\n\tkmrand = ClusterInit.kmrand,\r\n\tkmpp = ClusterInit.kmpp;\r\n\r\nconst MAX = 10000;\r\n\r\n/**\r\n * Inits an array with values\r\n */\r\nfunction init(len,val,v) {\r\n\tv = v || [];\r\n\tfor(let i=0;i<len;i++) v[i] = val;\r\n\treturn v;\r\n}\r\n\r\nfunction test(point, fndist) {\r\n\tlet\r\n\t\tmulti = Array.isArray(point),\r\n\t\tks = this.centroids,\r\n\t\tk = ks.length;\r\n\r\n\t// For each value in data, find the nearest centroid\r\n\tlet min = Infinity, idx = 0;\r\n\tfor(let j=0;j<k;j++) {\r\n\t\t// Custom, Multidimensional or unidimensional\r\n\t\tlet dist =\tfndist? fndist(point,ks[j]) :\r\n\t\t\t\t\t\t\t\tmulti? eudist(point,ks[j]) :\r\n\t\t\t\t\t\t\t\tMath.abs(point-ks[j]);\r\n\r\n\t\tif(dist<=min) {\r\n\t\t\tmin = dist;\r\n\t\t\tidx = j;\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tidx, centroid:ks[idx]\r\n\t}\r\n}\r\n\r\nfunction skmeans(data,k,initial,maxit,fndist) {\r\n\tvar ks = [], old = [], idxs = [], dist = [];\r\n\tvar conv = false, it = maxit || MAX;\r\n\tvar len = data.length, vlen = data[0].length, multi = vlen>0;\r\n\tvar count = [];\r\n\r\n\tif(!initial) {\r\n\t\tlet idxs = {}, z=0;\r\n\t\twhile(ks.length<k) {\r\n\t\t\tlet idx = Math.floor(Math.random()*len);\r\n\t\t\tif(!idxs[idx]) {\r\n\t\t\t\tidxs[idx] = true;\r\n\t\t\t\tks[z++] = data[idx];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse if(initial==\"kmrand\") {\r\n\t\tks = kmrand(data,k);\r\n\t}\r\n\telse if(initial==\"kmpp\") {\r\n\t\tks = kmpp(data,k);\r\n\t}\r\n\telse {\r\n\t\tks = initial;\r\n\t}\r\n\r\n\tdo {\r\n\t\t// Reset k count\r\n\t\tinit(k,0,count);\r\n\r\n\t\t// For each value in data, find the nearest centroid\r\n\t\tfor(let i=0;i<len;i++) {\r\n\t\t\tlet min = Infinity, idx = 0;\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\t// Custom, Multidimensional or unidimensional\r\n\t\t\t\tvar dist =\tfndist ? fndist(data[i],ks[j]) :\r\n\t\t\t\t\t\t\t\t\t\tmulti? eudist(data[i],ks[j]) :\r\n\t\t\t\t\t\t\t\t\t\tMath.abs(data[i]-ks[j]);\r\n\r\n\t\t\t\tif(dist<=min) {\r\n\t\t\t\t\tmin = dist;\r\n\t\t\t\t\tidx = j;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tidxs[i] = idx;\t// Index of the selected centroid for that value\r\n\t\t\tcount[idx]++;\t\t// Number of values for this centroid\r\n\t\t}\r\n\r\n\t\t// Recalculate centroids\r\n\t\tvar sum = [], old = [], dif = 0;\r\n\t\tif(multi) {\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\tsum[j] = init(vlen,0,sum[j]);\r\n\t\t\t\told[j] = ks[j];\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\tsum[j] = 0;\r\n\t\t\t\told[j] = ks[j];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If multidimensional\r\n\t\tif(multi) {\r\n\t\t\tfor(let j=0;j<k;j++) ks[j] = [];\r\n\r\n\t\t\t// Sum values and count for each centroid\r\n\t\t\tfor(let i=0;i<len;i++) {\r\n\t\t\t\tlet\tidx = idxs[i],\t\t// Centroid for that item\r\n\t\t\t\t\t\tvsum = sum[idx],\t// Sum values for this centroid\r\n\t\t\t\t\t\tvect = data[i];\t\t// Current vector\r\n\r\n\t\t\t\t// Accumulate value on the centroid for current vector\r\n\t\t\t\tfor(let h=0;h<vlen;h++) {\r\n\t\t\t\t\tvsum[h] += vect[h];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Calculate the average for each centroid\r\n\t\t\tconv = true;\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\tlet ksj = ks[j],\t\t// Current centroid\r\n\t\t\t\t\t\tsumj = sum[j],\t// Accumulated centroid values\r\n\t\t\t\t\t\toldj = old[j], \t// Old centroid value\r\n\t\t\t\t\t\tcj = count[j];\t// Number of elements for this centroid\r\n\r\n\t\t\t\t// New average\r\n\t\t\t\tfor(let h=0;h<vlen;h++) {\r\n\t\t\t\t\tksj[h] = (sumj[h])/(cj) || 0;\t// New centroid\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Find if centroids have moved\r\n\t\t\t\tif(conv) {\r\n\t\t\t\t\tfor(let h=0;h<vlen;h++) {\r\n\t\t\t\t\t\tif(oldj[h]!=ksj[h]) {\r\n\t\t\t\t\t\t\tconv = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If unidimensional\r\n\t\telse {\r\n\t\t\t// Sum values and count for each centroid\r\n\t\t\tfor(let i=0;i<len;i++) {\r\n\t\t\t\tlet idx = idxs[i];\r\n\t\t\t\tsum[idx] += data[i];\r\n\t\t\t}\r\n\t\t\t// Calculate the average for each centroid\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\tks[j] = sum[j]/count[j] || 0;\t// New centroid\r\n\t\t\t}\r\n\t\t\t// Find if centroids have moved\r\n\t\t\tconv = true;\r\n\t\t\tfor(let j=0;j<k;j++) {\r\n\t\t\t\tif(old[j]!=ks[j]) {\r\n\t\t\t\t\tconv = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconv = conv || (--it<=0);\r\n\t}while(!conv);\r\n\r\n\treturn {\r\n\t\tit : MAX-it,\r\n\t\tk : k,\r\n\t\tidxs : idxs,\r\n\t\tcentroids : ks,\r\n\t\ttest : test\r\n\t};\r\n}\r\n\r\nmodule.exports = skmeans;\r\n\n},{\"./distance.js\":2,\"./kinit.js\":3}]},{},[1]);\n"],"file":"skmeans.js"}